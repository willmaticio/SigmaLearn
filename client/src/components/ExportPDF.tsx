import { jsPDF } from "jspdf";
import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";
import { SolveResponse } from "@shared/schema";

interface ExportPDFProps {
  solution: SolveResponse;
  topicTitle?: string;
  query?: string;
}

export function ExportPDF({ solution, topicTitle, query }: ExportPDFProps) {
  const handleExport = async () => {
    const pdf = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - 2 * margin;
    let yPosition = margin;

    // Helper to check if we need a new page
    const checkPageBreak = (requiredSpace: number) => {
      if (yPosition + requiredSpace > pageHeight - margin) {
        pdf.addPage();
        yPosition = margin;
        return true;
      }
      return false;
    };

    // Header
    pdf.setFontSize(20);
    pdf.setFont("helvetica", "bold");
    pdf.text("SigmaLearn - Solution", margin, yPosition);
    yPosition += 10;

    // Topic title
    if (topicTitle) {
      pdf.setFontSize(14);
      pdf.setFont("helvetica", "normal");
      pdf.text(topicTitle, margin, yPosition);
      yPosition += 8;
    }

    // Separator line
    pdf.setLineWidth(0.5);
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;

    // Problem statement
    if (query) {
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "bold");
      pdf.text("Problem:", margin, yPosition);
      yPosition += 6;

      pdf.setFont("helvetica", "normal");
      const queryLines = pdf.splitTextToSize(query, contentWidth);
      pdf.text(queryLines, margin, yPosition);
      yPosition += queryLines.length * 6 + 10;
    }

    checkPageBreak(20);

    // Final Result
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "bold");
    pdf.text("Result:", margin, yPosition);
    yPosition += 8;

    pdf.setFont("helvetica", "normal");
    pdf.setFontSize(14);
    
    // Try to render LaTeX as plain text (simplified)
    const resultText = (solution.result_latex || "").replace(/\\\\/g, "").replace(/[{}]/g, "");
    const resultLines = pdf.splitTextToSize(resultText, contentWidth);
    pdf.text(resultLines, margin, yPosition);
    yPosition += resultLines.length * 7 + 12;

    checkPageBreak(15);

    // Steps section
    if (solution.steps && solution.steps.length > 0) {
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "bold");
      pdf.text("Step-by-Step Solution:", margin, yPosition);
      yPosition += 10;

      solution.steps.forEach((step, index) => {
        checkPageBreak(30);

        // Step number and rule
        pdf.setFontSize(11);
        pdf.setFont("helvetica", "bold");
        pdf.text(`Step ${step.index}: ${step.rule}`, margin, yPosition);
        yPosition += 7;

        // Before expression
        pdf.setFontSize(10);
        pdf.setFont("helvetica", "normal");
        const beforeText = (step.before_latex || "").replace(/\\\\/g, "").replace(/[{}]/g, "");
        const beforeLines = pdf.splitTextToSize(`Before: ${beforeText}`, contentWidth);
        pdf.text(beforeLines, margin + 5, yPosition);
        yPosition += beforeLines.length * 5 + 3;

        // After expression
        const afterText = (step.after_latex || "").replace(/\\\\/g, "").replace(/[{}]/g, "");
        const afterLines = pdf.splitTextToSize(`After: ${afterText}`, contentWidth);
        pdf.text(afterLines, margin + 5, yPosition);
        yPosition += afterLines.length * 5 + 8;
      });
    }

    // Footer
    const timestamp = new Date().toLocaleString();
    pdf.setFontSize(8);
    pdf.setTextColor(128, 128, 128);
    pdf.text(`Generated by SigmaLearn on ${timestamp}`, margin, pageHeight - 10);

    // Save the PDF
    const filename = `sigmalearn-solution-${Date.now()}.pdf`;
    pdf.save(filename);
  };

  return (
    <Button
      onClick={handleExport}
      variant="outline"
      size="sm"
      data-testid="button-export-pdf"
      className="gap-2"
    >
      <Download className="h-4 w-4" />
      Export PDF
    </Button>
  );
}
